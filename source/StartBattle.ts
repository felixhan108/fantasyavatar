import { Weapon } from '@/assets/Weapons';
import { GameState } from '@/store/gameStore';
import { useGameStore } from '@/store/gameStore';
import { CustomScene } from '@/types/CustomScene';
import { Monsters } from '@/assets/Monsters';
import { Character } from '@/assets/Characters';

export default function StartBattle(scene: CustomScene, delta: number) {
  const Character = useGameStore.getState().character;
  const CharacterSprite = useGameStore.getState().characterSprite;

  console.log('‚öîÔ∏è StartBattle');

  // 1. Î™¨Ïä§ÌÑ∞ Îì±Ïû•
  console.log('üëæ Î™¨Ïä§ÌÑ∞ Îì±Ïû•');
  // 1-1. Î™¨Ïä§ÌÑ∞ Í∞íÏùÑ Í∞ÄÏ†∏ÏôÄ Ìï¥Îãπ Î™¨Ïä§ÌÑ∞ Ïä§ÌîÑÎùºÏù¥Ìä∏ ÏÉùÏÑ±
  const Monster = Monsters[useGameStore.getState().monsterType];

  // 1-2. Î™¨Ïä§ÌÑ∞ Ïä§ÌîÑÎùºÏù¥Ìä∏ ÏÉùÏÑ± ÌõÑ ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä
  const MonsterSprite = Monster.createSprite(scene);
  MonsterSprite.play(Monster.walkAnim);
  // 1-3. Î™¨Ïä§ÌÑ∞ Ïä§ÌîÑÎùºÏù¥Ìä∏ ÌîåÎ†àÏù¥ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÑ§Ï†ï -> 1Ï¥à tween ÏúºÎ°ú Í±∏Ïñ¥ÏÑú x:130 Ï¢åÌëúÍπåÏßÄ Ïù¥Îèô
  scene.tweens.add({
    targets: MonsterSprite,
    x: 100,
    duration: 2000,
    ease: 'Linear',
    onComplete: () => {
      // Î∞∞Í≤Ω Ïù¥Îèô Î©àÏ∂§
      useGameStore.getState().setIsBackgroundMoving(false);

      // Ï∫êÎ¶≠ÌÑ∞ Ïï†ÎãàÎ©îÏù¥ÏÖò idle
      CharacterSprite.play(Character.idleAnim);
      // Î™¨Ïä§ÌÑ∞ Ïï†ÎãàÎ©îÏù¥ÏÖò idle
      MonsterSprite.play(Monster.idleAnim);

      // 2. Ï∫êÎ¶≠ÌÑ∞ÏôÄ ÌÑ¥Ï†ú Ï†ÑÌà¨ ÏãúÏûë
      console.log('‚öîÔ∏è Ï∫êÎ¶≠ÌÑ∞ÏôÄ ÌÑ¥Ï†ú Ï†ÑÌà¨ ÏãúÏûë');
      // Í∏∞Î≥∏ Ï∫êÎ¶≠ÌÑ∞Ïùò Ïä§Ìéô Ï†ÄÏû•
      useGameStore.getState().setCharacterStatus(Character);
      // Ï∫êÎ¶≠ÌÑ∞ Ïä§Ìéô Ï∂úÎ†•
      const characterStatus = useGameStore.getState().characterStatus;
      console.log('üë£ Ï∫êÎ¶≠ÌÑ∞ Ïä§Ìéô ÏÉÅÌÉú', characterStatus);
      // Î™¨Ïä§ÌÑ∞Ïùò Í∏∞Î≥∏ Ïä§Ìéô ÏÉÅÌÉú Ï†ÄÏû•
      const currentMonsterStatus = useGameStore.getState().setCurrentMonsterStatus({
        name: Monster.key,
        hp: Monster.status.hp,
        maxHP: Monster.status.maxHP,
        attack: Monster.status.attack,
        defense: Monster.status.defense,
        exp: Monster.status.exp,
        gold: Monster.status.gold,
      });
      // Î™¨Ïä§ÌÑ∞ Ïä§Ìéô Ï∂úÎ†•
      console.log('üëæ Î™¨Ïä§ÌÑ∞ Ïä§Ìéô ÏÉÅÌÉú', currentMonsterStatus);

      // 3. Ï∫êÎ¶≠ÌÑ∞ Ï≤¥Î†• Í∞êÏÜå
      // ÏºÄÎ¶≠ÌÑ∞ 1ÎåÄ Ïä§ÏºàÎ†àÌÜ§ 1ÎåÄ Î≤àÍ∞àÏïÑ Í∞ÄÎ©¥ÏÑú Ïπ©ÎãàÎã§.
      let currentAttacker: 'character' | 'monster' = 'character';
      // const freshCharacterStatus = useGameStore.getState().characterStatus;
      const freshMonsterStatus = useGameStore.getState().currentMonsterStatus;
      // ÎπÑÎèôÍ∏∞ Ïù¥Î≤§Ìä∏ loop Ï∂îÍ∞Ä
      const event = scene.time.addEvent({
        delay: 1000,
        loop: true,
        callback: () => {
          if (characterStatus.hp <= 0) {
            console.log('‚ùó Ï∫êÎ¶≠ÌÑ∞Í∞Ä Ï£ΩÏóàÏäµÎãàÎã§. Ìå®Î∞∞!');
            // Ï†ÑÌà¨ Ï¢ÖÎ£å Ï≤òÎ¶¨
            event.remove();
            useGameStore.getState().setGameState(GameState.RESULT);
            scene.soldier.play('SOLDIER-DEAD'); // Ï£ΩÎäî Ïï†ÎãàÎ©îÏù¥ÏÖò (ÏûàÎã§Î©¥)
            return;
          }

          if (freshMonsterStatus.hp <= 0) {
            console.log('üéâ Î™¨Ïä§ÌÑ∞Í∞Ä Ï£ΩÏóàÏäµÎãàÎã§. ÏäπÎ¶¨!');
            // Ï†ÑÌà¨ Ï¢ÖÎ£å Ï≤òÎ¶¨
            event.remove();
            MonsterSprite.destroy();
            useGameStore.getState().setGameState(GameState.RESULT);
            scene.soldier.play('SOLDIER-WALK'); // Îã§Ïãú Ïó¨Ìñâ Î™®ÎìúÎ°ú Í±∑Í∏∞
            return;
          }

          if (currentAttacker === 'character') {
            // Ï∫êÎ¶≠ÌÑ∞ Í≥µÍ≤© Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂úÎ†•
            CharacterSprite.play(Character.attackAnim);

            // Ï∫êÎ¶≠ÌÑ∞ Í≥µÍ≤©Î†• Í≥ÑÏÇ∞
            const characterAttack = characterStatus.attack + characterStatus.weapon.bonusAttack;
            console.log('Ï∫êÎ¶≠ÌÑ∞ Í≥µÍ≤©Î†•', characterAttack);
            // Ï∫êÎ¶≠ÌÑ∞ Í≥µÍ≤© Ïï†ÎãàÎ©îÏù¥ÏÖò Ï¢ÖÎ£å ÌõÑ idle Ïï†ÎãàÎ©îÏù¥ÏÖò Ïû¨ÏÉù
            CharacterSprite.once('animationcomplete', () => {
              CharacterSprite.play(Character.idleAnim);
            });

            // Î™¨Ïä§ÌÑ∞ Îã§Ïπ®
            scene.time.delayedCall(300, () => {
              MonsterSprite.play(Monster.hurtAnim);

              // Î™¨Ïä§ÌÑ∞ Ï≤¥Î†• Í∞êÏÜå
              const newHp = freshMonsterStatus.hp - characterAttack;

              // Ï≤¥Î†•ÏùÑ Í∞±Ïã†Ìï¥ÏÑú useStoreÏóê Î∞òÏòÅ
              useGameStore.getState().setCurrentMonsterStatus({
                ...freshMonsterStatus,
                hp: newHp, // ÏùåÏàò Ï≤¥Î†• ÌóàÏö©
              });
              console.log('Î™¨Ïä§ÌÑ∞ Ï≤¥Î†•', newHp);

              MonsterSprite.once('animationcomplete', () => {
                MonsterSprite.play(Monster.idleAnim);
              });
            });

            // Î™¨Ïä§ÌÑ∞ Í≥µÍ≤©ÏúºÎ°ú ÌÑ¥ÏùÑ ÎÑòÍπÄ
            currentAttacker = 'monster';
            console.log('currentAttacker', currentAttacker);
          } else if (currentAttacker === 'monster') {
            console.log('Î™¨Ïä§ÌÑ∞ Í≥µÍ≤©');

            //   MonsterSprite.destroy();
            //   Monster.clearMonster();

            //   scene.encounterStarted = false;
            //   useGameStore.getState().setGameState(GameState.RESULT);
            //   scene.time.removeEvent(event);
            //   // RESULT -> TRAVELING
            //   // Í≤∞Í≥º Í∞íÏù¥ RESULT Ïù¥Î©¥ ÏÉÅÌÉúÍ∞íÏùÑ Îã§Ïãú TREVELING ÏúºÎ°ú Î≥ÄÍ≤Ω
            //   useGameStore.getState().setGameState(GameState.TRAVELING);
            //   scene.soldier.play("SOLDIER-WALK");

            //   console.log("Î™¨Ïä§ÌÑ∞Í∞Ä Ï£ΩÏóàÏäµÎãàÎã§.");

            //   return;
            // }

            MonsterSprite.play(Monster.attackAnim);
            MonsterSprite.once('animationcomplete', () => {
              MonsterSprite.play(Monster.idleAnim);
            });

            scene.time.delayedCall(300, () => {
              // 200ms = 2ÌîÑÎ†àÏûÑ (60fps Í∏∞Ï§Ä)
              CharacterSprite.play(Character.hurtAnim);
              CharacterSprite.once('animationcomplete', () => {
                if (CharacterSprite) {
                  CharacterSprite.play(Character.idleAnim);
                }
              });
            });
            currentAttacker = 'character';
          }

          // 3. Î∞∞ÌãÄ ÏôÑÎ£å ÌõÑ Í≤∞Í≥º ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          // console.log("üëë Î∞∞ÌãÄ ÏôÑÎ£å ÌõÑ Í≤∞Í≥º ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô");
          // useGameStore.getState().setStopBattle(false);
          // useGameStore.getState().setGameState(GameState.RESULT);
        },
      });
    },
  });

  // //1. Ï∫êÎ¶≠ÌÑ∞ IDLE ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
  // scene.soldier.play("SOLDIER-IDLE");

  // //2. Ïä¨ÎùºÏûÑ Îì±Ïû• -> ÏÉàÎ°úÏö¥ Î™¨Ïä§ÌÑ∞ ÏÉùÏÑ±
  // const monsterData = Monsters[monsterKey];
  // const sprite = monsterData.createSprite(scene);

  // useGameStore.getState().setCurrentMonster({
  //   name: monsterData.key,
  //   HP: monsterData.status.HP,
  //   maxHP: monsterData.status.maxHP,
  //   attack: monsterData.status.attack,
  //   defense: monsterData.status.defense,
  //   exp: monsterData.status.exp,
  //   gold: monsterData.status.gold,
  //   sprite: sprite,
  // });

  // //3. Ïä¨ÎùºÏûÑ Ïù¥Îèô ->  ÎåÄÍ≤∞
  // scene.tweens.add({
  //   targets: sprite,
  //   x: 100,
  //   duration: 2000,
  //   ease: "Linear",
  //   onComplete: () => {
  //     sprite.play(monsterData.idleAnim);

  //     console.log("Ïä¨ÎùºÏûÑÏùò Îì±Ïû•ÏùÑ Í∏∞Îã§Î†∏Îã§Í∞Ä Ï†ÑÌà¨ ÏãúÏûë");
  //     //3. Ï†ÑÌà¨ ÌÉÄÏù¥Î®∏ ÏãúÏûë
  //     let currentAttacker: "soldier" | "monster" = "soldier";

  //     const event = scene.time.addEvent({
  //       delay: 1000,
  //       callback: () => {
  //         const monster = useGameStore.getState().currentMonster;

  //         if (!monster || !monster.sprite) {
  //           console.log("Î™¨Ïä§ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
  //           return;
  //         }

  //         if (currentAttacker === "soldier") {
  //           scene.soldier.play("SOLDIER-ATTACK");
  //           scene.soldier.once("animationcomplete", () => {
  //             scene.soldier.play("SOLDIER-IDLE");
  //           });
  //           scene.time.delayedCall(300, () => {
  //             // 200ms = 2ÌîÑÎ†àÏûÑ (60fps Í∏∞Ï§Ä)
  //             sprite.play(monsterData.hurtAnim);
  //             sprite.once("animationcomplete", () => {
  //               sprite.play(monsterData.idleAnim);
  //             });
  //           });

  //           useGameStore.getState().updateMonsterHP(monster, monster.HP - 10);
  //           console.log("Î™¨Ïä§ÌÑ∞(Ïä¨ÎùºÏûÑ) Ï≤¥Î†•: ", monster.HP);

  //           currentAttacker = "monster";
  //         } else {
  //           if (monster.HP <= 0) {
  //             monster.sprite?.destroy();
  //             useGameStore.getState().clearMonster();

  //             scene.encounterStarted = false;
  //             useGameStore.getState().setGameState(GameState.RESULT);
  //             scene.time.removeEvent(event);
  //             // RESULT -> TRAVELING
  //             // Í≤∞Í≥º Í∞íÏù¥ RESULT Ïù¥Î©¥ ÏÉÅÌÉúÍ∞íÏùÑ Îã§Ïãú TREVELING ÏúºÎ°ú Î≥ÄÍ≤Ω
  //             useGameStore.getState().setGameState(GameState.TRAVELING);
  //             scene.soldier.play("SOLDIER-WALK");

  //             console.log("Î™¨Ïä§ÌÑ∞Í∞Ä Ï£ΩÏóàÏäµÎãàÎã§.");

  //             return;
  //           }

  //           monster.sprite?.play(monsterData.attackAnim);
  //           monster.sprite?.once("animationcomplete", () => {
  //             monster.sprite?.play(monsterData.idleAnim);
  //           });

  //           scene.time.delayedCall(300, () => {
  //             // 200ms = 2ÌîÑÎ†àÏûÑ (60fps Í∏∞Ï§Ä)
  //             scene.soldier.play("SOLDIER-HURT");
  //             scene.soldier.once("animationcomplete", () => {
  //               if (scene.soldier) {
  //                 scene.soldier.play("SOLDIER-IDLE");
  //               }
  //             });
  //             useGameStore
  //               .getState()
  //               .setSoldierHP(
  //                 useGameStore.getState().getSoldierHP() - monster.attack
  //               );
  //             console.log(
  //               "ÏÜîÏ†ÄÏùò Ï≤¥Î†•: ",
  //               useGameStore.getState().getSoldierHP()
  //             );
  //           });
  //           currentAttacker = "soldier";
  //         }
  //       },
  //       loop: true,
  //     });
  //   },
  // });
}
